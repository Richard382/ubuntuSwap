{"version":3,"sources":["components/SearchInput/SearchInput.tsx","components/Select/Select.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["StyledInput","styled","Input","InputWrapper","div","theme","mediaQueries","sm","SearchInput","onChangeCallback","onChange","placeholder","useState","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","value","target","DropDownHeader","shadows","inset","colors","inputSecondary","input","DropDownListContainer","zIndices","dropdown","DropDownContainer","Box","props","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onOptionChange","dropdownRef","useRef","setIsOpen","selectedOptionIndex","setSelectedOptionIndex","toggling","event","stopPropagation","useEffect","handleClickOutside","document","addEventListener","removeEventListener","onClick","label","color","ref","map","option","index","selectedIndex","Wrapper","primary","ExpandableSectionButton","expanded","role","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","isTokenOnly","justifyContent","width","height","href","symbol","NofeeTag","variant","outline","startIcon","mr","Flex","MultiplierTag","Tag","CardHeading","multiplier","token","isCommunityFarm","quoteToken","depositFee","withdrawFee","alignItems","mb","TokenImage","primaryToken","secondaryToken","flexDirection","split","ml","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","text","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","scale","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","handleChange","useCallback","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_URL","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltipVisible","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","farmsProps","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","chosenFarmsLength","tokenMode","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","ubuntuPerBlock","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","src","alt","Page","checked","marginLeft","sort","b","exact","renderContent","Loading"],"mappings":"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","file":"static/js/8.510a68e6.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\r\nimport { Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    display: block;\r\n  }\r\n`\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <InputWrapper>\r\n      <StyledInput value={searchText} onChange={onChange} placeholder={t(placeholder)} />\r\n    </InputWrapper>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from '@pancakeswap/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\r\n  cursor: pointer;\r\n  width: 100%;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n  user-select: none;\r\n  z-index: 20;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps extends BoxProps {\r\n  options: OptionProps[]\r\n  onOptionChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onOptionChange, ...props }) => {\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(0)\r\n\r\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    setIsOpen(!isOpen)\r\n    event.stopPropagation()\r\n  }\r\n\r\n  const onOptionClicked = (selectedIndex: number) => () => {\r\n    setSelectedOptionIndex(selectedIndex)\r\n    setIsOpen(false)\r\n\r\n    if (onOptionChange) {\r\n      onOptionChange(options[selectedIndex])\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = () => {\r\n      setIsOpen(false)\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} {...props}>\r\n      <DropDownHeader onClick={toggling}>\r\n        <Text>{options[selectedOptionIndex].label}</Text>\r\n      </DropDownHeader>\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option, index) =>\r\n            index !== selectedOptionIndex ? (\r\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n  isTokenOnly,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      {!isTokenOnly && (<StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>)}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport {\r\n  Tag,\r\n  VerifiedIcon,\r\n  CommunityIcon,\r\n  RefreshIcon,\r\n  AutoRenewIcon,\r\n  TagProps,\r\n  TimerIcon,\r\n  BlockIcon,\r\n  VoteIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CoreTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Core')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst NofeeTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('No Fee')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CommunityTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\r\n      {t('Community')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst DualTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textSubtle\" outline {...props}>\r\n      {t('Dual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n      {t('Manual')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Auto')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst VoteNowTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"success\" startIcon={<VoteIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Vote Now')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst SoonTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"binance\" startIcon={<TimerIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n      {t('Soon')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nconst ClosedTag: React.FC<TagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Tag variant=\"textDisabled\" startIcon={<BlockIcon width=\"18px\" color=\"textDisabled\" mr=\"4px\" />} {...props}>\r\n      {t('Closed')}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport { CoreTag, NofeeTag, CommunityTag, DualTag, ManualPoolTag, CompoundingPoolTag, VoteNowTag, SoonTag, ClosedTag }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { NofeeTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage, TokenImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n  isTokenOnly?: boolean\r\n  depositFee?: string\r\n  withdrawFee?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken, isTokenOnly, depositFee, withdrawFee }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      {\r\n        isTokenOnly ? <TokenImage token={token} width={64} height={64} /> : \r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      }  \r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === '0%' ? <NofeeTag /> : null }\r\n          {multiplier ? (\r\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n          ) : (\r\n            <Skeleton ml=\"4px\" width={42} height={28} />\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceBigNumber = new BigNumber(balance)\r\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n      return balanceBigNumber.toLocaleString()\r\n    }\r\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  isTokenOnly,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal title={isTokenOnly ? t('Stake') : t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text mr=\"8px\" color=\"textSubtle\">\r\n          {t('Annual ROI at current rates')}:\r\n        </Text>\r\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\r\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </AnnualRoiContainer>\r\n      </Flex>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', isTokenOnly }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={isTokenOnly ? t('Unstake tokens') : t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n  isTokenOnly,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName, isTokenOnly)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n      isTokenOnly={isTokenOnly}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {isTokenOnly ? t('Stake') : t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"backgroundAlt\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"backgroundAlt\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'UBUT' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(lpContract, 'approve', [\r\n        masterChefContract.address,\r\n        ethers.constants.MaxUint256,\r\n      ])\r\n      const receipt = await tx.wait()\r\n      return receipt.status\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, isTokenOnly, token } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = isTokenOnly ? getAddress(token.address) : getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        isTokenOnly={farm.isTokenOnly}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          UBUT\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('UBUT + Fees')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = farm.isTokenOnly ? `${BASE_URL}/swap?outputCurrency=${getAddress(farm.token.address)}` : `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.isTokenOnly ? getAddress(farm.token.address) : getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'UBUT'\r\n\r\n  return (\r\n    <StyledCard isActive={isPromotedFarm}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          depositFee={farm.depositFee}\r\n          withdrawFee={farm.withdrawFee}\r\n        />\r\n        {!removed && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text>{t('APR')}:</Text>\r\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {farm.apr ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Earn')}:</Text>\r\n          <Text bold>{earnLabel}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Deposit Fee')}:</Text>\r\n          {farm.depositFee ? (\r\n              <Text bold>{farm.depositFee}</Text>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n          )}\r\n        </Flex>\r\n        {/* <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Withdraw Fee')}:</Text>\r\n          {farm.withdrawFee ? (\r\n              <Text bold>{farm.withdrawFee}</Text>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n          )}\r\n        </Flex> */}\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n            infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n            isTokenOnly={farm.isTokenOnly}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  pid: number\r\n  lpLabel: string\r\n  lpSymbol: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  multiplier,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <ApyButton\r\n          variant={hideButton ? 'text' : 'text-and-button'}\r\n          pid={pid}\r\n          lpSymbol={lpSymbol}\r\n          lpLabel={lpLabel}\r\n          multiplier={multiplier}\r\n          cakePrice={cakePrice}\r\n          apr={originalValue}\r\n          displayApr={value}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage, TokenImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid, isTokenOnly }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        {\r\n          isTokenOnly ? \r\n          <TokenImage token={token} width={64} height={64} /> : \r\n          <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n        } \r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Container>\r\n      {!isDesktop && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          UBUT\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Heading>{displayBalance}</Heading>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n  lpLabel?: string\r\n  displayApr?: string\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  apr,\r\n  multiplier,\r\n  lpSymbol,\r\n  lpLabel,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  displayApr,\r\n  isTokenOnly\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol, isTokenOnly)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const lpAddress = isTokenOnly ? getAddress(token.address) : getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={lpSymbol}\r\n      multiplier={multiplier}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n      isTokenOnly={isTokenOnly}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol}  isTokenOnly={isTokenOnly}/>,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Heading>{displayBalance()}</Heading>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {isTokenOnly ? t('Stake') : t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { BASE_ADD_LIQUIDITY_URL, BASE_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { NofeeTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 50px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.isTokenOnly ? getAddress(token.address) : getAddress(farm.lpAddresses)\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\r\n  const addLiquidityUrl = farm.isTokenOnly ? `${BASE_URL}/swap?outputCurrency=${getAddress(farm.token.address)}` : `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={addLiquidityUrl}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        {!farm.isTokenOnly && (<StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>)}\r\n      </InfoContainer>\r\n      <TagsContainer>\r\n          {farm.depositFee === '0%' && farm.withdrawFee === '0%'? <NofeeTag /> :\r\n          <div>\r\n            {farm.depositFee !== '0%' ? <Text>{t('Deposit Fee')}:{farm.depositFee}</Text> : null}\r\n            {farm.withdrawFee !== '0%' ?<Text>{t('Withdraw Fee')}:{farm.withdrawFee}</Text> : null}\r\n          </div>\r\n          }\r\n      </TagsContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isDesktop, isMobile } = useMatchBreakpoints()\r\n\r\n  const isSmallerScreen = !isDesktop\r\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isMobile) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex, } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  // if (cakeRewardsApr && lpRewardsApr) {\r\n  //   return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  // }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenFarmsLength = useRef(0)\r\n  const {tokenMode} = farmsProps;\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsWithUserData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = farm.isTokenOnly ? new BigNumber(farm.lpTotalInQuoteToken).times(farm.token.busdPrice) : new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET], new BigNumber(farm.ubuntuPerBlock))\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n          }\r\n          return farmsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [chosenFarmsMemoized, observerIsSet])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n        isTokenOnly: farm.isTokenOnly\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"primary\" mb=\"24px\">\r\n          {tokenMode ? <img src=\"/images/new/icon13.png\" alt=\"Grinder\" style={{\"paddingRight\":\"10px\", \"height\":\"40px\"}}/> : <img src=\"/images/new/icon12.png\" alt=\"Cultivate\" style={{\"paddingRight\":\"10px\", \"height\":\"50px\"}}/>}\r\n          {tokenMode ? t('Pools') : t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {tokenMode ? t('Stake Single token to earn.') : t('Stake LP tokens to earn.')}\r\n        </Heading>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  // {\r\n                  //   label: t('Hot'),\r\n                  //   value: 'hot',\r\n                  // },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onOptionChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder={tokenMode ? t('Search Pools') : t('Search Farms')} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={loadMoreRef} />\r\n        {/* <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}