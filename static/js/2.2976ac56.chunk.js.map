{"version":3,"sources":["views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/BuySellModals/shared/ApproveAndConfirmStage.tsx","views/Nft/market/components/BuySellModals/shared/TransactionConfirmed.tsx","views/Nft/market/components/BuySellModals/shared/ConfirmStage.tsx","hooks/useApproveConfirmTransaction.ts","components/ApproveConfirmButtons.tsx","../node_modules/lodash/isEmpty.js","views/Nft/market/components/BuySellModals/shared/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/types.ts","views/Nft/market/components/BuySellModals/SellModal/SellStage.tsx","views/Nft/market/components/BuySellModals/SellModal/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/SetPriceStage.tsx","views/Nft/market/components/BuySellModals/SellModal/EditStage.tsx","views/Nft/market/components/BuySellModals/SellModal/RemoveStage.tsx","views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx","views/Nft/market/components/BuySellModals/SellModal/index.tsx","components/ProfileAvatarWithTeam.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx","views/Nft/market/Profile/components/EditProfileModal/reducer.ts","views/Nft/market/Profile/hooks/useGetProfileCosts.ts","views/Nft/market/Profile/components/EditProfileModal/StartView.tsx","views/Nft/market/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Nft/market/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Nft/market/Profile/components/EditProfileModal/ApproveCakeView.tsx","views/Nft/market/Profile/components/EditProfileModal/index.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/components/ProfileNftModal.tsx"],"names":["PageButtons","styled","div","Arrow","theme","colors","primary","ApproveAndConfirmStage","variant","isApproved","isApproving","isConfirming","handleApprove","handleConfirm","t","useTranslation","p","flexDirection","mb","alignItems","success","fontSize","bold","color","mt","maxWidth","small","flex","width","size","disabled","onClick","TransactionConfirmed","txHash","onDismiss","chainId","useActiveWeb3React","justifyContent","height","href","getBscScanLink","px","pb","ConfirmStage","initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","account","useWeb3React","useReducer","dispatch","handlePreApprove","useRef","toastError","useToast","useEffect","current","then","result","isConfirmed","hasApproveFailed","hasConfirmFailed","a","tx","wait","receipt","status","params","ButtonArrangement","StyledApproveConfirmButtonRow","mediaQueries","md","Button","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","endIcon","undefined","isLoading","id","baseKeys","require","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","Object","prototype","module","exports","value","splice","length","tag","key","call","RoundedImage","Image","radii","Divider","cardBorder","HorizontalDivider","StepIndicator","Flex","secondary","textDisabled","SellingStage","SellStage","nftToSell","lowestPrice","continueToNextStage","continueToTransferStage","hasProfile","useProfile","itemPageUrlId","collectionAddress","toLowerCase","pancakeBunniesAddress","attributes","tokenId","useModal","EditProfileModal","onEditProfileModal","src","image","thumbnail","mr","gridTemplateColumns","name","textAlign","collectionName","toLocaleString","minimumFractionDigits","maximumFractionDigits","as","Link","external","BASE_URL","nftsBaseUrl","getBscScanLinkForNft","stagesWithBackButton","SET_PRICE","ADJUST_PRICE","APPROVE_AND_CONFIRM_SELL","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","StyledModal","Modal","stage","includes","textSubtle","GreyedOutContainer","Box","dropdown","RightAlignedInput","Input","BnbAmountCell","bnbAmount","bnbBusdPrice","useBNBBusdPrice","usdAmount","multiplyPriceByAmount","FeeAmountCell","creatorFee","tradingFee","totalFee","feeAmount","SetPriceStage","currentPrice","price","setPrice","inputRef","adjustedPriceIsTheSame","parseFloat","priceIsValid","Number","isNaN","useGetCollection","creatorFeeAsNumber","tradingFeeAsNumber","bnbPrice","priceAsFloat","priceInUsd","priceIsOutOfRange","useTooltip","percentage","placement","tooltip","tooltipVisible","targetRef","focus","textTransform","scale","inputMode","ref","isWarning","onChange","e","target","minPrice","maxPrice","alignSelf","EditStage","continueToAdjustPriceStage","continueToRemoveFromMarketStage","marketData","currentAskPrice","RemoveStage","TransferStage","transferAddress","setTransferAddress","isInvalidTransferAddress","transferAddressEqualsConnectedAddress","pt","placeholder","modalTitles","SELL","EDIT","TX_CONFIRMED","getToastText","SellModal","useState","setStage","confirmedTxHash","setConfirmedTxHash","useTheme","callWithGasPrice","useCallWithGasPrice","toastSuccess","collectionContract","useContractForCollection","nftMarketContract","useNftMarketContract","useAppDispatch","isAddress","useGetLowestPriceFromNft","dispatchSuccessAction","updateUserNft","location","NftLocation","WALLET","removeUserNft","FORSALE","isApprovedForAll","address","approvedForContract","Toast","transactionHash","methodName","askPrice","parseUnits","showBackButton","title","onBack","headerBackground","gradients","cardHeader","TeamAvatar","img","card","background","sm","AvatarWrapper","bg","AvatarInactive","NoProfileAvatarIcon","ProfileAvatarWithTeam","profile","nft","isActive","team","images","alt","useFetchUserNfts","isProfileInitialized","isInitialized","isProfileLoading","userNftsInitializationState","useUserNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","Label","label","isDisabled","Body","Children","StyledBackgroundImage","SelectionCard","isChecked","children","props","isSuccess","checked","style","Views","action","currentView","view","previousView","useEditProfile","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","numberCakeToReactivate","ethers","BigNumber","from","numberCakeToRegister","numberCakeToUpdate","costs","setCosts","calls","map","method","getPancakeProfileAddress","multicallv2","profileABI","fetchCosts","DangerOutline","failure","StartPage","needsApproval","setNeedsApproval","minimumCakeRequired","useGetCakeBalance","cakeBalance","balance","hasMinimumCakeRequired","fetchStatus","FetchStatus","SUCCESS","gte","cakeContract","useCake","cost","allowance","response","lt","checkApprovalStatus","minimum","formatBigNumber","PauseProfilePage","isAcknowledged","setIsAcknowledged","setIsConfirming","pancakeProfileContract","useProfileContract","handleDeactivateProfile","fetchProfile","htmlFor","cursor","display","marginBottom","ml","ChangeProfilePicPage","selectedNft","setSelectedNft","nfts","profileContract","library","nftsInWallet","filter","contract","getErc721Contract","getSigner","maxHeight","overflowY","walletNft","ApproveCakePage","setIsApproving","approve","mul","viewTitle","translationKey","isStartView","handleBack","hideCloseButton","StartView","PauseProfileView","ChangeProfilePicView","ApproveCakeView","Avatar","StyledFlex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","ProfileAvatarFetchStatus","FETCHED","to","lineHeight","truncateHash","TextWrapper","ProfileNftModal","py"],"mappings":"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","file":"static/js/2.2976ac56.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const PageButtons = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nexport const Arrow = styled.div`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 0 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { StepIndicator } from './styles'\r\n\r\ninterface ApproveAndConfirmStageProps {\r\n  variant: 'buy' | 'sell'\r\n  isApproved: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  handleApprove: () => void\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown if user wants to pay with WBNB and contract isn't approved yet\r\n// Sell Flow:\r\n// Shown the first time user puts NFT for sale\r\nconst ApproveAndConfirmStage: React.FC<ApproveAndConfirmStageProps> = ({\r\n  variant,\r\n  isApproved,\r\n  isApproving,\r\n  isConfirming,\r\n  handleApprove,\r\n  handleConfirm,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex mb=\"8px\" alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <StepIndicator success={isApproved}>\r\n              <Text fontSize=\"20px\" bold color=\"invertedContrast\">\r\n                1\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" color={isApproved ? 'success' : 'secondary'} bold>\r\n              {isApproved ? t('Enabled') : t('Enable')}\r\n            </Text>\r\n          </Flex>\r\n          {!isApproved && (\r\n            <Text mt=\"8px\" maxWidth=\"275px\" small color=\"textSubtle\">\r\n              {variant === 'buy'\r\n                ? t('Please enable WBNB spending in your wallet')\r\n                : t('Please enable your NFT to be sent to the market')}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isApproving && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      {!isApproved && (\r\n        <Button variant=\"secondary\" disabled={isApproving} onClick={handleApprove}>\r\n          {isApproving ? `${t('Enabling')}...` : t('Enable')}\r\n        </Button>\r\n      )}\r\n      <Flex alignItems=\"center\" mt=\"8px\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\" mt=\"16px\">\r\n            <StepIndicator success={!!0} disabled={!isApproved}>\r\n              <Text fontSize=\"20px\" bold color={!isApproved ? 'textDisabled' : 'invertedContrast'}>\r\n                2\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" bold color={isApproved ? 'secondary' : 'textDisabled'}>\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color={isApproved ? 'textSubtle' : 'textDisabled'}>\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"16px\" disabled={!isApproved || isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveAndConfirmStage\r\n","import React from 'react'\r\nimport { Flex, Text, Button, ArrowUpIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { Divider } from './styles'\r\n\r\ninterface TransactionConfirmedProps {\r\n  txHash: string\r\n  onDismiss: () => void\r\n}\r\n\r\nconst TransactionConfirmed: React.FC<TransactionConfirmedProps> = ({ txHash, onDismiss }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\" height=\"150px\">\r\n        <ArrowUpIcon width=\"64px\" height=\"64px\" color=\"primary\" />\r\n        <Text bold>{t('Transaction Confirmed')}</Text>\r\n        <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)}>{t('View on BscScan')}</LinkExternal>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex px=\"16px\" pb=\"16px\" justifyContent=\"center\">\r\n        <Button onClick={onDismiss} variant=\"secondary\" width=\"100%\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransactionConfirmed\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ConfirmStageProps {\r\n  isConfirming: boolean\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown in case user wants to pay with BNB\r\n// or if user wants to pay with WBNB and it is already approved\r\n// Sell Flow:\r\n// Shown if user adjusts the price or removes NFT from the market\r\nconst ConfirmStage: React.FC<ConfirmStageProps> = ({ isConfirming, handleConfirm }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <Text fontSize=\"20px\" bold color=\"secondary\">\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" height=\"72px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"24px\" disabled={isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? `${t('Confirming')}...` : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ConfirmStage\r\n","import { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    hasApproveFailed: state.approvalState === 'fail',\r\n    hasConfirmFailed: state.confirmState === 'fail',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async (params = {}) => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm(params)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","import styled from 'styled-components'\r\nimport { Flex, Image } from '@pancakeswap/uikit'\r\n\r\nexport const RoundedImage = styled(Image)`\r\n  border-radius: ${({ theme }) => theme.radii.small};\r\n  overflow: hidden;\r\n`\r\n\r\nexport const Divider = styled.div`\r\n  margin: 16px 0;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const HorizontalDivider = styled.div`\r\n  border-right: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const StepIndicator = styled(Flex)<{ success: boolean; disabled?: boolean }>`\r\n  border-radius: 50%;\r\n  background-color: ${({ theme, success, disabled }) => {\r\n    if (disabled) {\r\n      return 'none'\r\n    }\r\n    return success ? theme.colors.success : theme.colors.secondary\r\n  }};\r\n  border: ${({ theme, disabled }) => (disabled ? `1px solid ${theme.colors.textDisabled}` : 'none')};\r\n  height: 32px;\r\n  width: 32px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 8px;\r\n`\r\n","export enum SellingStage {\r\n  // Sell flow\r\n  SELL,\r\n  SET_PRICE,\r\n  APPROVE_AND_CONFIRM_SELL,\r\n  // Adjust price flow\r\n  EDIT,\r\n  ADJUST_PRICE,\r\n  CONFIRM_ADJUST_PRICE,\r\n  // Remove from market flow\r\n  REMOVE_FROM_MARKET,\r\n  CONFIRM_REMOVE_FROM_MARKET,\r\n  // Transfer flow\r\n  TRANSFER,\r\n  CONFIRM_TRANSFER,\r\n  // Common\r\n  TX_CONFIRMED,\r\n}\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, BinanceIcon, LinkExternal, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_URL } from 'config'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface SellStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToNextStage: () => void\r\n  continueToTransferStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to put their NFT for sale or transfer to another wallet\r\nconst SellStage: React.FC<SellStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToNextStage,\r\n  continueToTransferStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { hasProfile } = useProfile()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>\r\n                  {lowestPrice.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 3,\r\n                    maximumFractionDigits: 3,\r\n                  })}\r\n                </Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${BASE_URL}${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Sell')}\r\n        </Button>\r\n        <Button mb=\"8px\" variant=\"secondary\" onClick={continueToTransferStage}>\r\n          {t('Transfer')}\r\n        </Button>\r\n        {hasProfile && (\r\n          <Button variant=\"secondary\" onClick={onEditProfileModal}>\r\n            {t('Set as Profile Pic')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SellStage\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Box, Flex, Text, BinanceIcon, Input } from '@pancakeswap/uikit'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { SellingStage } from './types'\r\n\r\nexport const stagesWithBackButton = [\r\n  SellingStage.SET_PRICE,\r\n  SellingStage.ADJUST_PRICE,\r\n  SellingStage.APPROVE_AND_CONFIRM_SELL,\r\n  SellingStage.CONFIRM_ADJUST_PRICE,\r\n  SellingStage.REMOVE_FROM_MARKET,\r\n  SellingStage.CONFIRM_REMOVE_FROM_MARKET,\r\n  SellingStage.TRANSFER,\r\n  SellingStage.CONFIRM_TRANSFER,\r\n]\r\n\r\nexport const StyledModal = styled(Modal)<{ stage: SellingStage }>`\r\n  width: 360px;\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n  & h2:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `color: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n  & svg:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `fill: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n`\r\n\r\nexport const GreyedOutContainer = styled(Box)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  padding: 16px;\r\n`\r\n\r\nexport const RightAlignedInput = styled(Input)`\r\n  text-align: right;\r\n`\r\n\r\ninterface BnbAmountCellProps {\r\n  bnbAmount: number\r\n}\r\n\r\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${bnbAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        {`($${usdAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface FeeAmountCellProps {\r\n  bnbAmount: number\r\n  creatorFee: number\r\n  tradingFee: number\r\n}\r\n\r\nexport const FeeAmountCell: React.FC<FeeAmountCellProps> = ({ bnbAmount, creatorFee, tradingFee }) => {\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  const totalFee = creatorFee + tradingFee\r\n  const totalFeeAsDecimal = totalFee / 100\r\n  const feeAmount = bnbAmount * totalFeeAsDecimal\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${feeAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 6,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        ({totalFee}%)\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Flex, Grid, Box, Text, Button, BinanceIcon, ErrorIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { Divider } from '../shared/styles'\r\nimport { GreyedOutContainer, BnbAmountCell, RightAlignedInput, FeeAmountCell } from './styles'\r\n\r\ninterface SetPriceStageProps {\r\n  nftToSell: NftToken\r\n  variant: 'set' | 'adjust'\r\n  currentPrice?: string\r\n  lowestPrice?: number\r\n  price: string\r\n  setPrice: React.Dispatch<React.SetStateAction<string>>\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst MIN_PRICE = 0.005\r\nconst MAX_PRICE = 10000\r\n\r\n// Stage where user puts price for NFT they're about to put on sale\r\n// Also shown when user wants to adjust the price of already listed NFT\r\nconst SetPriceStage: React.FC<SetPriceStageProps> = ({\r\n  nftToSell,\r\n  variant,\r\n  lowestPrice,\r\n  currentPrice,\r\n  price,\r\n  setPrice,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const inputRef = useRef<HTMLInputElement>()\r\n  const adjustedPriceIsTheSame = variant === 'adjust' && parseFloat(currentPrice) === parseFloat(price)\r\n  const priceIsValid = !price || Number.isNaN(parseFloat(price)) || parseFloat(price) <= 0\r\n\r\n  const { creatorFee, tradingFee } = useGetCollection(nftToSell.collectionAddress)\r\n  const creatorFeeAsNumber = parseFloat(creatorFee)\r\n  const tradingFeeAsNumber = parseFloat(tradingFee)\r\n  const bnbPrice = useBNBBusdPrice()\r\n  const priceAsFloat = parseFloat(price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbPrice, priceAsFloat)\r\n\r\n  const priceIsOutOfRange = priceAsFloat > MAX_PRICE || priceAsFloat < MIN_PRICE\r\n\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'When selling NFTs from this collection, a portion of the BNB paid will be diverted before reaching the seller:',\r\n        )}\r\n      </Text>\r\n      {creatorFeeAsNumber > 0 && (\r\n        <Text>{t('%percentage%% royalties to the collection owner', { percentage: creatorFee })}</Text>\r\n      )}\r\n      <Text>{t('%percentage%% trading fee will be used to buy & burn CAKE', { percentage: tradingFee })}</Text>\r\n    </>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (inputRef && inputRef.current) {\r\n      inputRef.current.focus()\r\n    }\r\n  }, [inputRef])\r\n\r\n  const getButtonText = () => {\r\n    if (variant === 'adjust') {\r\n      if (adjustedPriceIsTheSame || priceIsValid) {\r\n        return t('Input New Sale Price')\r\n      }\r\n      return t('Confirm')\r\n    }\r\n    return t('Enable Listing')\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold p=\"16px\">\r\n        {variant === 'set' ? t('Set Price') : t('Adjust Sale Price')}\r\n      </Text>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Set Price')}\r\n        </Text>\r\n        <Flex>\r\n          <Flex flex=\"1\" alignItems=\"center\">\r\n            <BinanceIcon width={24} height={24} mr=\"4px\" />\r\n            <Text bold>WBNB</Text>\r\n          </Flex>\r\n          <Flex flex=\"2\">\r\n            <RightAlignedInput\r\n              scale=\"sm\"\r\n              type=\"number\"\r\n              inputMode=\"decimal\"\r\n              value={price}\r\n              ref={inputRef}\r\n              isWarning={priceIsOutOfRange}\r\n              onChange={(e) => setPrice(e.target.value)}\r\n            />\r\n          </Flex>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" height=\"21px\" justifyContent=\"flex-end\">\r\n          {!Number.isNaN(priceInUsd) && (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`$${priceInUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        {priceIsOutOfRange && (\r\n          <Text fontSize=\"12px\" color=\"failure\">\r\n            {t('Allowed price range is between %minPrice% and %maxPrice% WBNB', {\r\n              minPrice: MIN_PRICE,\r\n              maxPrice: MAX_PRICE,\r\n            })}\r\n          </Text>\r\n        )}\r\n        <Flex mt=\"8px\">\r\n          <Text small color=\"textSubtle\" mr=\"8px\">\r\n            {t('Seller pays %percentage%% platform fee on sale', {\r\n              percentage: creatorFeeAsNumber + tradingFeeAsNumber,\r\n            })}\r\n          </Text>\r\n          <span ref={targetRef}>\r\n            <ErrorIcon />\r\n          </span>\r\n          {tooltipVisible && tooltip}\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Platform fee if sold')}\r\n          </Text>\r\n          <FeeAmountCell bnbAmount={priceAsFloat} creatorFee={creatorFeeAsNumber} tradingFee={tradingFeeAsNumber} />\r\n        </Flex>\r\n        {lowestPrice && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Lowest price on market')}\r\n            </Text>\r\n            <BnbAmountCell bnbAmount={lowestPrice} />\r\n          </Flex>\r\n        )}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Box>\r\n          <Text small color=\"textSubtle\">\r\n            {t('The NFT will be removed from your wallet and put on sale at this price.')}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Sales are in WBNB. You can swap WBNB to BNB 1:1 for free with UbuntuSwap.')}\r\n          </Text>\r\n        </Box>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={priceIsValid || adjustedPriceIsTheSame || priceIsOutOfRange}\r\n        >\r\n          {getButtonText()}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SetPriceStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, LinkExternal, BinanceIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BASE_URL } from 'config'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface EditStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToAdjustPriceStage: () => void\r\n  continueToRemoveFromMarketStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to edit already listed NFT (i.e. adjust price or remove from sale)\r\nconst EditStage: React.FC<EditStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToAdjustPriceStage,\r\n  continueToRemoveFromMarketStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Text small color=\"textSubtle\">\r\n            {t('Your price')}\r\n          </Text>\r\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n            <Text small>{nftToSell.marketData.currentAskPrice}</Text>\r\n          </Flex>\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${BASE_URL}${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToAdjustPriceStage}>\r\n          {t('Adjust Sale Price')}\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={continueToRemoveFromMarketStage}>\r\n          {t('Remove from Market')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditStage\r\n","import React from 'react'\r\nimport { Flex, Box, Text, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Divider } from '../shared/styles'\r\n\r\ninterface RemoveStageProps {\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst RemoveStage: React.FC<RemoveStageProps> = ({ continueToNextStage }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Box p=\"16px\" maxWidth=\"360px\">\r\n        <Text fontSize=\"24px\" bold>\r\n          {t('Remove from Market')}\r\n        </Text>\r\n        <Text mt=\"24px\" color=\"textSubtle\">\r\n          {t('Removing this NFT from the marketplace will return it to your wallet.')}\r\n        </Text>\r\n        <Text mt=\"16px\" color=\"textSubtle\">\r\n          {t('Continue?')}\r\n        </Text>\r\n      </Box>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RemoveStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { Divider, RoundedImage } from '../shared/styles'\r\nimport { GreyedOutContainer } from './styles'\r\n\r\ninterface TransferStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  transferAddress: string\r\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\r\n  isInvalidTransferAddress: boolean\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst TransferStage: React.FC<TransferStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  transferAddress,\r\n  setTransferAddress,\r\n  isInvalidTransferAddress,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\r\n  const getErrorText = () => {\r\n    if (isInvalidTransferAddress) {\r\n      return t('That’s not a Binance Smart Chain wallet address.')\r\n    }\r\n    if (transferAddressEqualsConnectedAddress) {\r\n      return t('This address is the one that is currently connected')\r\n    }\r\n    return null\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\r\n        {t('Transfer to New Wallet')}\r\n      </Text>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Lowest price')}\r\n          </Text>\r\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n            <Text small>{lowestPrice}</Text>\r\n          </Flex>\r\n        </Grid>\r\n      </Flex>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Receiving address')}\r\n        </Text>\r\n        <Input\r\n          scale=\"sm\"\r\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\r\n          placeholder={t('Paste BSC address')}\r\n          value={transferAddress}\r\n          onChange={(e) => setTransferAddress(e.target.value)}\r\n        />\r\n        {isInvalidTransferAddress ||\r\n          (transferAddressEqualsConnectedAddress && (\r\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\r\n              {getErrorText()}\r\n            </Text>\r\n          ))}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Text small color=\"textSubtle\">\r\n          {t('This action will send your wallet to the address you have indicated above. Make sure it’s the correct')}\r\n        </Text>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransferStage\r\n","import React, { useState } from 'react'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { isAddress } from 'utils'\r\nimport { useContractForCollection, useNftMarketContract } from 'hooks/useContract'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\r\nimport SellStage from './SellStage'\r\nimport SetPriceStage from './SetPriceStage'\r\nimport EditStage from './EditStage'\r\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\r\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\r\nimport { StyledModal, stagesWithBackButton } from './styles'\r\nimport { SellingStage } from './types'\r\nimport ConfirmStage from '../shared/ConfirmStage'\r\nimport RemoveStage from './RemoveStage'\r\nimport TransferStage from './TransferStage'\r\n\r\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\r\n  switch (stage) {\r\n    // Sell flow\r\n    case SellingStage.SELL:\r\n      return t('Details')\r\n    case SellingStage.SET_PRICE:\r\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n      return t('Back')\r\n    // Adjust price flow\r\n    case SellingStage.EDIT:\r\n      return t('Details')\r\n    case SellingStage.ADJUST_PRICE:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_ADJUST_PRICE:\r\n      return t('Confirm transaction')\r\n    // Remove from market flow\r\n    case SellingStage.REMOVE_FROM_MARKET:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n      return t('Confirm transaction')\r\n    // Transfer flow\r\n    case SellingStage.TRANSFER:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_TRANSFER:\r\n      return t('Confirm transaction')\r\n    // Common\r\n    case SellingStage.TX_CONFIRMED:\r\n      return t('Transaction Confirmed')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\r\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n    return t('Your NFT has been returned to your wallet')\r\n  }\r\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n    return t('Your NFT has been transferred to another wallet')\r\n  }\r\n  if (variant === 'sell') {\r\n    return t('Your NFT has been listed for sale!')\r\n  }\r\n  return t('Your NFT listing has been changed.')\r\n}\r\n\r\ninterface SellModalProps extends InjectedModalProps {\r\n  variant: 'sell' | 'edit'\r\n  nftToSell: NftToken\r\n}\r\n\r\nconst SellModal: React.FC<SellModalProps> = ({ variant, nftToSell, onDismiss }) => {\r\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\r\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice)\r\n  const [transferAddress, setTransferAddress] = useState('')\r\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { account } = useWeb3React()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { toastSuccess } = useToast()\r\n  const collectionContract = useContractForCollection(nftToSell.collectionAddress)\r\n  const nftMarketContract = useNftMarketContract()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\r\n\r\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\r\n\r\n  const goBack = () => {\r\n    switch (stage) {\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setPrice(nftToSell.marketData.currentAskPrice)\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_ADJUST_PRICE:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        setStage(SellingStage.TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToNextStage = () => {\r\n    switch (stage) {\r\n      case SellingStage.SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\r\n        break\r\n      case SellingStage.EDIT:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.CONFIRM_TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToRemoveFromMarketStage = () => {\r\n    setStage(SellingStage.REMOVE_FROM_MARKET)\r\n  }\r\n\r\n  const continueToTransferStage = () => {\r\n    setStage(SellingStage.TRANSFER)\r\n  }\r\n\r\n  const dispatchSuccessAction = () => {\r\n    switch (stage) {\r\n      // Remove from sale\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.WALLET,\r\n          }),\r\n        )\r\n        break\r\n      // Transfer NFT\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        dispatch(\r\n          removeUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n          }),\r\n        )\r\n        break\r\n      default:\r\n        // Modify listing OR list for sale\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.FORSALE,\r\n          }),\r\n        )\r\n        break\r\n    }\r\n  }\r\n\r\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\r\n    onRequiresApproval: async () => {\r\n      try {\r\n        const approvedForContract = await collectionContract.isApprovedForAll(account, nftMarketContract.address)\r\n        return approvedForContract\r\n      } catch (error) {\r\n        return false\r\n      }\r\n    },\r\n    onApprove: () => {\r\n      return callWithGasPrice(collectionContract, 'setApprovalForAll', [nftMarketContract.address, true])\r\n    },\r\n    onApproveSuccess: async ({ receipt }) => {\r\n      toastSuccess(\r\n        t('Contract approved - you can now put your NFT for sale!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n    onConfirm: () => {\r\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\r\n      }\r\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n        return callWithGasPrice(collectionContract, 'safeTransferFrom(address,address,uint256)', [\r\n          account,\r\n          transferAddress,\r\n          nftToSell.tokenId,\r\n        ])\r\n      }\r\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\r\n      const askPrice = parseUnits(price)\r\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\r\n    },\r\n    onSuccess: async ({ receipt }) => {\r\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      dispatchSuccessAction()\r\n      setConfirmedTxHash(receipt.transactionHash)\r\n      setStage(SellingStage.TX_CONFIRMED)\r\n    },\r\n  })\r\n\r\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\r\n\r\n  return (\r\n    <StyledModal\r\n      title={modalTitles(stage, t)}\r\n      stage={stage}\r\n      onDismiss={onDismiss}\r\n      onBack={showBackButton ? goBack : null}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stage === SellingStage.SELL && (\r\n        <SellStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          continueToTransferStage={continueToTransferStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.SET_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"set\"\r\n          continueToNextStage={continueToNextStage}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\r\n        <ApproveAndConfirmStage\r\n          variant=\"sell\"\r\n          isApproved={isApproved}\r\n          isApproving={isApproving}\r\n          isConfirming={isConfirming}\r\n          handleApprove={handleApprove}\r\n          handleConfirm={handleConfirm}\r\n        />\r\n      )}\r\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\r\n      {stage === SellingStage.EDIT && (\r\n        <EditStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToAdjustPriceStage={continueToNextStage}\r\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.ADJUST_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"adjust\"\r\n          continueToNextStage={continueToNextStage}\r\n          currentPrice={nftToSell.marketData.currentAskPrice}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\r\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.TRANSFER && (\r\n        <TransferStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          transferAddress={transferAddress}\r\n          setTransferAddress={setTransferAddress}\r\n          isInvalidTransferAddress={isInvalidTransferAddress}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_TRANSFER && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default SellModal\r\n","import React from 'react'\r\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\r\nimport { Profile } from 'state/types'\r\nimport styled from 'styled-components'\r\n\r\nexport interface ProfileAvatarProps {\r\n  profile: Profile\r\n}\r\n\r\nconst TeamAvatar = styled.img`\r\n  border: 1px solid ${({ theme }) => theme.card.background};\r\n  border-radius: 50%;\r\n  bottom: 0px;\r\n  position: absolute;\r\n  right: 0px;\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  width: 37.5%;\r\n  height: 37.5%;\r\n  z-index: 5;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    border-width: 2px;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div<{ bg: string }>`\r\n  background: url('${({ bg }) => bg}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n// TODO: replace with no profile avatar icon\r\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst ProfileAvatarWithTeam: React.FC<ProfileAvatarProps> = ({ profile }) => {\r\n  return (\r\n    <AvatarWrapper bg={profile.nft?.image.thumbnail}>\r\n      {!profile.isActive && <AvatarInactive />}\r\n      <TeamAvatar src={`/images/teams/${profile.team.images.alt}`} alt={profile.team.name} />\r\n    </AvatarWrapper>\r\n  )\r\n}\r\n\r\nexport default ProfileAvatarWithTeam\r\n","import { useEffect, useMemo } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\r\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\r\n\r\n// We need to fetch collectibles for non-connected accounts, hence this hook accepts an account string.\r\nconst useFetchUserNfts = (account: string) => {\r\n  const dispatch = useAppDispatch()\r\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\r\n  const { userNftsInitializationState } = useUserNfts()\r\n  const collections = useGetCollections()\r\n\r\n  const hasProfileNft = profile?.tokenId\r\n  const profileNftTokenId = profile?.tokenId?.toString()\r\n  const profileNftCollectionAddress = profile?.collectionAddress\r\n\r\n  const profileNftWithCollectionAddress = useMemo(() => {\r\n    if (hasProfileNft) {\r\n      return {\r\n        tokenId: profileNftTokenId,\r\n        collectionAddress: profileNftCollectionAddress,\r\n        nftLocation: NftLocation.PROFILE,\r\n      }\r\n    }\r\n    return null\r\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\r\n\r\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\r\n\r\n  // Fetch on first load when profile fetch is resolved\r\n  const shouldFetch =\r\n    account &&\r\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\r\n    isProfileInitialized &&\r\n    !isProfileLoading\r\n\r\n  // Fetch on account / profile change, once profile fetch is resolved\r\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading\r\n\r\n  useEffect(() => {\r\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\r\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\r\n    }\r\n  }, [\r\n    dispatch,\r\n    account,\r\n    shouldFetch,\r\n    hasAccountSwitched,\r\n    profileNftTokenId,\r\n    collections,\r\n    profileNftWithCollectionAddress,\r\n  ])\r\n}\r\n\r\nexport default useFetchUserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Radio } from '@pancakeswap/uikit'\r\n\r\ninterface SelectionCardProps {\r\n  name: string\r\n  value: string | number\r\n  isChecked?: boolean\r\n  onChange: (val: any) => void\r\n  image: string\r\n  disabled?: boolean\r\n}\r\n\r\nconst Label = styled.label<{ isDisabled: boolean }>`\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\r\n`\r\n\r\nconst Body = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-grow: 1;\r\n  height: 80px;\r\n  padding: 8px 16px;\r\n`\r\n\r\nconst Children = styled.div`\r\n  margin-left: 16px;\r\n`\r\n\r\nconst StyledBackgroundImage = styled.div<{ src: string }>`\r\n  align-self: stretch;\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 80px;\r\n`\r\n\r\nconst SelectionCard: React.FC<SelectionCardProps> = ({\r\n  name,\r\n  value,\r\n  isChecked = false,\r\n  image,\r\n  onChange,\r\n  disabled,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\r\n      <Label isDisabled={disabled}>\r\n        <Body>\r\n          <Radio\r\n            name={name}\r\n            checked={isChecked}\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            disabled={disabled}\r\n            style={{ flex: 'none' }}\r\n          />\r\n          <Children>{children}</Children>\r\n        </Body>\r\n        <StyledBackgroundImage src={image} />\r\n      </Label>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SelectionCard\r\n","import { useReducer } from 'react'\r\n\r\nexport enum Views {\r\n  START = 'start',\r\n  CHANGE = 'change',\r\n  REMOVE = 'remove',\r\n  APPROVE = 'approve',\r\n}\r\n\r\nexport type Actions =\r\n  | {\r\n      type: 'set_view'\r\n      view: Views\r\n    }\r\n  | {\r\n      type: 'go_previous'\r\n    }\r\n\r\nexport interface State {\r\n  currentView: Views\r\n  previousView: Views | null\r\n}\r\n\r\nconst reducer = (state: State, action: Actions): State => {\r\n  switch (action.type) {\r\n    case 'set_view':\r\n      return {\r\n        ...state,\r\n        currentView: action.view,\r\n        previousView: state.currentView,\r\n      }\r\n    case 'go_previous':\r\n      return {\r\n        ...state,\r\n        currentView: state.previousView,\r\n        previousView: state.currentView,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport interface UseEditProfileResponse extends State {\r\n  goToStart: () => void\r\n  goToChange: () => void\r\n  goToApprove: () => void\r\n  goToRemove: () => void\r\n  goPrevious: () => void\r\n}\r\n\r\nconst useEditProfile = (): UseEditProfileResponse => {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    currentView: Views.START,\r\n    previousView: null,\r\n  })\r\n\r\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\r\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\r\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\r\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\r\n  const goPrevious = () => dispatch({ type: 'go_previous' })\r\n\r\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\r\n}\r\n\r\nexport default useEditProfile\r\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst useGetProfileCosts = () => {\r\n  const { t } = useTranslation()\r\n  const [costs, setCosts] = useState({\r\n    numberCakeToReactivate: ethers.BigNumber.from(0),\r\n    numberCakeToRegister: ethers.BigNumber.from(0),\r\n    numberCakeToUpdate: ethers.BigNumber.from(0),\r\n  })\r\n  const { toastError } = useToast()\r\n\r\n  useEffect(() => {\r\n    const fetchCosts = async () => {\r\n      try {\r\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map((method) => ({\r\n          address: getPancakeProfileAddress(),\r\n          name: method,\r\n        }))\r\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2<\r\n          [[ethers.BigNumber], [ethers.BigNumber], [ethers.BigNumber]]\r\n        >(profileABI, calls)\r\n\r\n        setCosts({\r\n          numberCakeToReactivate,\r\n          numberCakeToRegister,\r\n          numberCakeToUpdate,\r\n        })\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'))\r\n      }\r\n    }\r\n\r\n    fetchCosts()\r\n  }, [setCosts, toastError, t])\r\n\r\n  return costs\r\n}\r\n\r\nexport default useGetProfileCosts\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { useCake } from 'hooks/useContract'\r\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport ProfileAvatarWithTeam from 'components/ProfileAvatarWithTeam'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface StartPageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n  goToRemove: UseEditProfileResponse['goToRemove']\r\n  goToApprove: UseEditProfileResponse['goToApprove']\r\n}\r\n\r\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\r\n  border-color: ${({ theme }) => theme.colors.failure};\r\n  color: ${({ theme }) => theme.colors.failure};\r\n  margin-bottom: 24px;\r\n\r\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\r\n    border-color: ${({ theme }) => theme.colors.failure};\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div`\r\n  height: 64px;\r\n  width: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 128px;\r\n    width: 128px;\r\n  }\r\n`\r\n\r\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\r\n  const [needsApproval, setNeedsApproval] = useState(null)\r\n  const { profile } = useProfile()\r\n  const { numberCakeToUpdate, numberCakeToReactivate } = useGetProfileCosts()\r\n  const minimumCakeRequired = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\r\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(minimumCakeRequired)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n\r\n  /**\r\n   * Check if the wallet has the required CAKE allowance to change their profile pic or reactivate\r\n   * If they don't, we send them to the approval screen first\r\n   */\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      const response = await cakeContract.allowance(account, getPancakeProfileAddress())\r\n      setNeedsApproval(response.lt(cost))\r\n    }\r\n\r\n    if (account) {\r\n      checkApprovalStatus()\r\n    }\r\n  }, [account, cost, setNeedsApproval, cakeContract])\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n      <AvatarWrapper>\r\n        <ProfileAvatarWithTeam profile={profile} />\r\n      </AvatarWrapper>\r\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\r\n        <Text as=\"p\" color=\"failure\">\r\n          {!hasMinimumCakeRequired &&\r\n            t('%minimum% CAKE required to change profile pic', { minimum: formatBigNumber(minimumCakeRequired) })}\r\n        </Text>\r\n      </Flex>\r\n      {profile.isActive ? (\r\n        <>\r\n          <Button\r\n            width=\"100%\"\r\n            mb=\"8px\"\r\n            onClick={needsApproval === true ? goToApprove : goToChange}\r\n            disabled={!hasMinimumCakeRequired || needsApproval === null}\r\n          >\r\n            {t('Change Profile Pic')}\r\n          </Button>\r\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\r\n            {t('Remove Profile Pic')}\r\n          </DangerOutline>\r\n        </>\r\n      ) : (\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={needsApproval === true ? goToApprove : goToChange}\r\n          disabled={!hasMinimumCakeRequired || needsApproval === null}\r\n        >\r\n          {t('Reactivate Profile')}\r\n        </Button>\r\n      )}\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StartPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useToast from 'hooks/useToast'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ntype PauseProfilePageProps = InjectedModalProps\r\n\r\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\r\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { profile } = useProfile()\r\n  const { numberCakeToReactivate } = useGetProfileCosts()\r\n  const { t } = useTranslation()\r\n  const pancakeProfileContract = useProfileContract()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\r\n\r\n  const handleDeactivateProfile = async () => {\r\n    const tx = await callWithGasPrice(pancakeProfileContract, 'pauseProfile')\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      // Re-fetch profile\r\n      await dispatch(fetchProfile(account))\r\n      toastSuccess(t('Profile Paused!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      onDismiss()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t(\r\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\r\n        )}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Cost to reactivate in the future: %cost% CAKE', { cost: formatBigNumber(numberCakeToReactivate) })}\r\n      </Text>\r\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\r\n        <Flex alignItems=\"center\">\r\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\r\n          <Text ml=\"8px\">{t('I understand')}</Text>\r\n        </Flex>\r\n      </label>\r\n      <Button\r\n        width=\"100%\"\r\n        isLoading={isConfirming}\r\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        disabled={!isAcknowledged || isConfirming}\r\n        onClick={handleDeactivateProfile}\r\n        mb=\"8px\"\r\n      >\r\n        {t('Confirm')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PauseProfilePage\r\n","import React, { useState } from 'react'\r\nimport { Button, Box, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\r\nimport SelectionCard from 'views/ProfileCreation/SelectionCard'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation } from 'state/nftMarket/types'\r\n\r\ntype ChangeProfilePicPageProps = InjectedModalProps\r\n\r\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\r\n  const [selectedNft, setSelectedNft] = useState({\r\n    tokenId: null,\r\n    collectionAddress: null,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { nfts } = useUserNfts()\r\n  const dispatch = useAppDispatch()\r\n  const { profile } = useProfile()\r\n  const profileContract = useProfileContract()\r\n  const { account, library } = useWeb3React()\r\n  const { toastSuccess } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const nftsInWallet = nfts.filter((nft) => nft.location === NftLocation.WALLET)\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onApprove: () => {\r\n        const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\r\n        return callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\r\n      },\r\n      onConfirm: () => {\r\n        if (!profile.isActive) {\r\n          return callWithGasPrice(profileContract, 'reactivateProfile', [\r\n            selectedNft.collectionAddress,\r\n            selectedNft.tokenId,\r\n          ])\r\n        }\r\n\r\n        return callWithGasPrice(profileContract, 'updateProfile', [selectedNft.collectionAddress, selectedNft.tokenId])\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        // Re-fetch profile\r\n        await dispatch(fetchProfile(account))\r\n        toastSuccess(t('Profile Updated!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Choose a new Collectible to use as your profile pic.')}\r\n      </Text>\r\n      <Box maxHeight=\"300px\" overflowY=\"scroll\">\r\n        {nftsInWallet.map((walletNft) => {\r\n          const handleChange = (tokenId: string) => {\r\n            setSelectedNft({\r\n              tokenId,\r\n              collectionAddress: walletNft.collectionAddress,\r\n            })\r\n          }\r\n          return (\r\n            <SelectionCard\r\n              name=\"profilePicture\"\r\n              key={walletNft.tokenId}\r\n              value={selectedNft.tokenId}\r\n              image={walletNft.image.thumbnail}\r\n              isChecked={walletNft.tokenId === selectedNft.tokenId}\r\n              onChange={() => handleChange(walletNft.tokenId)}\r\n              disabled={isApproving || isConfirming || isConfirmed}\r\n            >\r\n              <Text bold>{walletNft.name}</Text>\r\n            </SelectionCard>\r\n          )\r\n        })}\r\n      </Box>\r\n      {nfts.length === 0 && (\r\n        <>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\r\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\r\n          </Text>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\r\n          </Text>\r\n        </>\r\n      )}\r\n      <ApproveConfirmButtons\r\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\r\n        isApproving={isApproving}\r\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\r\n        isConfirming={isConfirming}\r\n        onApprove={handleApprove}\r\n        onConfirm={handleConfirm}\r\n      />\r\n      <Button mt=\"8px\" variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChangeProfilePicPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface ApproveCakePageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n}\r\n\r\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\r\n  const [isApproving, setIsApproving] = useState(false)\r\n  const { profile } = useProfile()\r\n  const { t } = useTranslation()\r\n  const { numberCakeToUpdate, numberCakeToReactivate } = useGetProfileCosts()\r\n  const cakeContract = useCake()\r\n  const { toastError } = useToast()\r\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n\r\n  const handleApprove = async () => {\r\n    const tx = await cakeContract.approve(getPancakeProfileAddress(), cost.mul(2).toString())\r\n    setIsApproving(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      goToChange()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsApproving(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\r\n        <Text>{formatBigNumber(cost)} CAKE</Text>\r\n      </Flex>\r\n      <Button\r\n        disabled={isApproving}\r\n        isLoading={isApproving}\r\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        width=\"100%\"\r\n        mb=\"8px\"\r\n        onClick={handleApprove}\r\n      >\r\n        {t('Enable')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveCakePage\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useEditProfile, { Views } from './reducer'\r\nimport StartView from './StartView'\r\nimport PauseProfileView from './PauseProfileView'\r\nimport ChangeProfilePicView from './ChangeProfilePicView'\r\nimport ApproveCakeView from './ApproveCakeView'\r\n\r\ntype EditProfileModalProps = InjectedModalProps\r\n\r\nconst viewTitle = {\r\n  [Views.START]: 'Edit Profile',\r\n  [Views.CHANGE]: 'Change Profile Pic',\r\n  [Views.REMOVE]: 'Remove Profile Pic',\r\n  [Views.APPROVE]: 'Enable CAKE',\r\n}\r\n\r\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\r\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\r\n  const { t } = useTranslation()\r\n  const translationKey = viewTitle[currentView]\r\n\r\n  const isStartView = currentView === Views.START\r\n  const handleBack = isStartView ? null : () => goPrevious()\r\n\r\n  return (\r\n    <Modal title={t(translationKey)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\r\n      <div style={{ maxWidth: '400px' }}>\r\n        {currentView === Views.START && (\r\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\r\n        )}\r\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\r\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\r\n        {currentView === Views.APPROVE && <ApproveCakeView goToChange={goToChange} onDismiss={onDismiss} />}\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EditProfileModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport { ProfileAvatarFetchStatus } from 'state/types'\r\nimport { Link } from 'react-router-dom'\r\nimport { nftsBaseUrl } from '../constants'\r\n\r\nconst Avatar = styled.img`\r\n  margin-right: 4px;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-right: 12px;\r\n  }\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  align-items: center;\r\n  transition: opacity 200ms ease-in;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\r\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\r\n  const profileName = username || '-'\r\n\r\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n  if (avatarFetchStatus === ProfileAvatarFetchStatus.FETCHED) {\r\n    if (profileNft?.image?.thumbnail) {\r\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\r\n    } else {\r\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\r\n      <StyledFlex>\r\n        {sellerProfilePicComponent}\r\n        <Box display=\"inline\">\r\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\r\n          {usernameFetchStatus !== ProfileAvatarFetchStatus.FETCHED ? (\r\n            <Skeleton />\r\n          ) : (\r\n            <Text lineHeight=\"1.25\">{profileName}</Text>\r\n          )}\r\n        </Box>\r\n      </StyledFlex>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default ProfileCell\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, useModal, Link, Grid, LinkExternal } from '@pancakeswap/uikit'\r\nimport { BASE_URL } from 'config'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { HorizontalDivider, RoundedImage } from './BuySellModals/shared/styles'\r\nimport EditProfileModal from '../Profile/components/EditProfileModal'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../constants'\r\n\r\nexport const StyledModal = styled(Modal)`\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst TextWrapper = styled(Flex)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n`\r\n\r\ninterface ProfileNftModalProps extends InjectedModalProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst ProfileNftModal: React.FC<ProfileNftModalProps> = ({ nft, onDismiss }) => {\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  const itemPageUrlId = nft.collectionAddress === pancakeBunniesAddress ? nft.attributes[0].value : nft.tokenId\r\n\r\n  return (\r\n    <StyledModal title={t('Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex p=\"16px\">\r\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n            <Text bold>{nft.name}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            {/* TODO: Add lowestPrice when available */}\r\n          </Grid>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" px=\"16px\" mb=\"16px\">\r\n          <Flex flex=\"2\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Token ID: %id%', { id: nft.tokenId })}\r\n            </Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\" flex=\"3\">\r\n            <Button\r\n              as={Link}\r\n              p=\"0px\"\r\n              height=\"16px\"\r\n              external\r\n              variant=\"text\"\r\n              href={`${BASE_URL}${nftsBaseUrl}/collections/${nft.collectionAddress}/${itemPageUrlId}`}\r\n            >\r\n              {t('View Item')}\r\n            </Button>\r\n            <HorizontalDivider />\r\n            <LinkExternal p=\"0px\" height=\"16px\" href={getBscScanLinkForNft(nft.collectionAddress, nft.tokenId)}>\r\n              BscScan\r\n            </LinkExternal>\r\n          </Flex>\r\n        </Flex>\r\n        <TextWrapper p=\"24px 16px\" flexDirection=\"column\">\r\n          <Text mb=\"16px\">{t(\"You're using this NFT as your Pancake Profile picture\")}</Text>\r\n          <Text color=\"textSubtle\" mb=\"16px\" fontSize=\"14px\">\r\n            {t(\r\n              'Removing it will suspend your profile, and you won’t be able to earn points, participate in team activities, or be eligible for new NFT drops.',\r\n            )}\r\n          </Text>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {t('Go to your profile page to continue.')}\r\n          </Text>\r\n        </TextWrapper>\r\n        <Flex flexDirection=\"column\" py=\"16px\" px=\"16px\">\r\n          <Button onClick={onEditProfileModal} width=\"100%\" variant=\"secondary\">\r\n            {t('Remove Profile Pic')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default ProfileNftModal\r\n"],"sourceRoot":""}